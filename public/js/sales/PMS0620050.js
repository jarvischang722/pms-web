!function(I){function C(I){delete installedChunks[I]}function g(I){var C=document.getElementsByTagName("head")[0],g=document.createElement("script");g.type="text/javascript",g.charset="utf-8",g.src=t.p+""+I+"."+G+".hot-update.js",C.appendChild(g)}function Q(I){return I=I||1e4,new Promise(function(C,g){if("undefined"==typeof XMLHttpRequest)return g(new Error("No browser support"));try{var Q=new XMLHttpRequest,A=t.p+""+G+".hot-update.json";Q.open("GET",A,!0),Q.timeout=I,Q.send(null)}catch(I){return g(I)}Q.onreadystatechange=function(){if(4===Q.readyState)if(0===Q.status)g(new Error("Manifest request to "+A+" timed out."));else if(404===Q.status)C();else if(200!==Q.status&&304!==Q.status)g(new Error("Manifest request to "+A+" failed."));else{try{var I=JSON.parse(Q.responseText)}catch(I){return void g(I)}C(I)}}})}function A(I){var C=p[I];if(!C)return t;var g=function(g){return C.hot.active?(p[g]?p[g].parents.indexOf(I)<0&&p[g].parents.push(I):(L=[I],e=g),C.children.indexOf(g)<0&&C.children.push(g)):(console.warn("[HMR] unexpected require("+g+") from disposed module "+I),L=[]),t(g)};for(var Q in t)Object.prototype.hasOwnProperty.call(t,Q)&&"e"!==Q&&Object.defineProperty(g,Q,function(I){return{configurable:!0,enumerable:!0,get:function(){return t[I]},set:function(C){t[I]=C}}}(Q));return g.e=function(I){function C(){u--,"prepare"===o&&(m[I]||i(I),0===u&&0===E&&c())}return"ready"===o&&B("prepare"),u++,t.e(I).then(C,function(I){throw C(),I})},g}function F(I){var C={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:e!==I,active:!0,accept:function(I,g){if(void 0===I)C._selfAccepted=!0;else if("function"==typeof I)C._selfAccepted=I;else if("object"==typeof I)for(var Q=0;Q<I.length;Q++)C._acceptedDependencies[I[Q]]=g||function(){};else C._acceptedDependencies[I]=g||function(){}},decline:function(I){if(void 0===I)C._selfDeclined=!0;else if("object"==typeof I)for(var g=0;g<I.length;g++)C._declinedDependencies[I[g]]=!0;else C._declinedDependencies[I]=!0},dispose:function(I){C._disposeHandlers.push(I)},addDisposeHandler:function(I){C._disposeHandlers.push(I)},removeDisposeHandler:function(I){var g=C._disposeHandlers.indexOf(I);g>=0&&C._disposeHandlers.splice(g,1)},check:l,apply:n,status:function(I){if(!I)return o;W.push(I)},addStatusHandler:function(I){W.push(I)},removeStatusHandler:function(I){var C=W.indexOf(I);C>=0&&W.splice(C,1)},data:X[I]};return e=void 0,C}function B(I){o=I;for(var C=0;C<W.length;C++)W[C].call(null,I)}function U(I){return+I+""===I?+I:I}function l(I){if("idle"!==o)throw new Error("check() is only allowed in idle status");return b=I,B("check"),Q(Z).then(function(I){if(!I)return B("idle"),null;J={},m={},S=I.c,V=I.h,B("prepare");var C=new Promise(function(I,C){x={resolve:I,reject:C}});d={};return i(0),"prepare"===o&&0===u&&0===E&&c(),C})}function s(I,C){if(S[I]&&J[I]){J[I]=!1;for(var g in C)Object.prototype.hasOwnProperty.call(C,g)&&(d[g]=C[g]);0==--E&&0===u&&c()}}function i(I){S[I]?(J[I]=!0,E++,g(I)):m[I]=!0}function c(){B("ready");var I=x;if(x=null,I)if(b)Promise.resolve().then(function(){return n(b)}).then(function(C){I.resolve(C)},function(C){I.reject(C)});else{var C=[];for(var g in d)Object.prototype.hasOwnProperty.call(d,g)&&C.push(U(g));I.resolve(C)}}function n(g){function Q(I,C){for(var g=0;g<C.length;g++){var Q=C[g];I.indexOf(Q)<0&&I.push(Q)}}if("ready"!==o)throw new Error("apply() is only allowed in ready status");g=g||{};var A,F,l,s,i,c={},n=[],a={},e=function(){console.warn("[HMR] unexpected require("+b.moduleId+") to disposed module")};for(var x in d)if(Object.prototype.hasOwnProperty.call(d,x)){i=U(x);var b;b=d[x]?function(I){for(var C=[I],g={},A=C.slice().map(function(I){return{chain:[I],id:I}});A.length>0;){var F=A.pop(),B=F.id,U=F.chain;if((s=p[B])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:U,moduleId:B};if(s.hot._main)return{type:"unaccepted",chain:U,moduleId:B};for(var l=0;l<s.parents.length;l++){var i=s.parents[l],c=p[i];if(c){if(c.hot._declinedDependencies[B])return{type:"declined",chain:U.concat([i]),moduleId:B,parentId:i};C.indexOf(i)>=0||(c.hot._acceptedDependencies[B]?(g[i]||(g[i]=[]),Q(g[i],[B])):(delete g[i],C.push(i),A.push({chain:U.concat([i]),id:i})))}}}}return{type:"accepted",moduleId:I,outdatedModules:C,outdatedDependencies:g}}(i):{type:"disposed",moduleId:x};var Z=!1,R=!1,W=!1,E="";switch(b.chain&&(E="\nUpdate propagation: "+b.chain.join(" -> ")),b.type){case"self-declined":g.onDeclined&&g.onDeclined(b),g.ignoreDeclined||(Z=new Error("Aborted because of self decline: "+b.moduleId+E));break;case"declined":g.onDeclined&&g.onDeclined(b),g.ignoreDeclined||(Z=new Error("Aborted because of declined dependency: "+b.moduleId+" in "+b.parentId+E));break;case"unaccepted":g.onUnaccepted&&g.onUnaccepted(b),g.ignoreUnaccepted||(Z=new Error("Aborted because "+i+" is not accepted"+E));break;case"accepted":g.onAccepted&&g.onAccepted(b),R=!0;break;case"disposed":g.onDisposed&&g.onDisposed(b),W=!0;break;default:throw new Error("Unexception type "+b.type)}if(Z)return B("abort"),Promise.reject(Z);if(R){a[i]=d[i],Q(n,b.outdatedModules);for(i in b.outdatedDependencies)Object.prototype.hasOwnProperty.call(b.outdatedDependencies,i)&&(c[i]||(c[i]=[]),Q(c[i],b.outdatedDependencies[i]))}W&&(Q(n,[b.moduleId]),a[i]=e)}var u=[];for(F=0;F<n.length;F++)i=n[F],p[i]&&p[i].hot._selfAccepted&&u.push({module:i,errorHandler:p[i].hot._selfAccepted});B("dispose"),Object.keys(S).forEach(function(I){!1===S[I]&&C(I)});for(var m,J=n.slice();J.length>0;)if(i=J.pop(),s=p[i]){var D={},y=s.hot._disposeHandlers;for(l=0;l<y.length;l++)(A=y[l])(D);for(X[i]=D,s.hot.active=!1,delete p[i],delete c[i],l=0;l<s.children.length;l++){var N=p[s.children[l]];N&&((m=N.parents.indexOf(i))>=0&&N.parents.splice(m,1))}}var h,r;for(i in c)if(Object.prototype.hasOwnProperty.call(c,i)&&(s=p[i]))for(r=c[i],l=0;l<r.length;l++)h=r[l],(m=s.children.indexOf(h))>=0&&s.children.splice(m,1);B("apply"),G=V;for(i in a)Object.prototype.hasOwnProperty.call(a,i)&&(I[i]=a[i]);var H=null;for(i in c)if(Object.prototype.hasOwnProperty.call(c,i)&&(s=p[i])){r=c[i];var Y=[];for(F=0;F<r.length;F++)if(h=r[F],A=s.hot._acceptedDependencies[h]){if(Y.indexOf(A)>=0)continue;Y.push(A)}for(F=0;F<Y.length;F++){A=Y[F];try{A(r)}catch(I){g.onErrored&&g.onErrored({type:"accept-errored",moduleId:i,dependencyId:r[F],error:I}),g.ignoreErrored||H||(H=I)}}}for(F=0;F<u.length;F++){var k=u[F];i=k.module,L=[i];try{t(i)}catch(I){if("function"==typeof k.errorHandler)try{k.errorHandler(I)}catch(C){g.onErrored&&g.onErrored({type:"self-accept-error-handler-errored",moduleId:i,error:C,orginalError:I,originalError:I}),g.ignoreErrored||H||(H=C),H||(H=I)}else g.onErrored&&g.onErrored({type:"self-accept-errored",moduleId:i,error:I}),g.ignoreErrored||H||(H=I)}}return H?(B("fail"),Promise.reject(H)):(B("idle"),new Promise(function(I){I(n)}))}function t(C){if(p[C])return p[C].exports;var g=p[C]={i:C,l:!1,exports:{},hot:F(C),parents:(R=L,L=[],R),children:[]};return I[C].call(g.exports,g,g.exports,A(C)),g.l=!0,g.exports}var a=window.webpackHotUpdate;window.webpackHotUpdate=function(I,C){s(I,C),a&&a(I,C)};var e,x,d,V,b=!0,G="65685f5696bab45dbcc8",Z=1e4,X={},L=[],R=[],W=[],o="idle",E=0,u=0,m={},J={},S={},p={};t.m=I,t.c=p,t.d=function(I,C,g){t.o(I,C)||Object.defineProperty(I,C,{configurable:!1,enumerable:!0,get:g})},t.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return t.d(C,"a",C),C},t.o=function(I,C){return Object.prototype.hasOwnProperty.call(I,C)},t.p="/dist",t.h=function(){return G},A(0)(t.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n\nlet vmHub = new Vue();\nlet gs_prgId = "PMS0620050";\n\nlet go_funcPurview = new FuncPurview(gs_prgId).getFuncPurvs();\n\n/** DatagridRmSingleGridClass **/\nfunction DatagridSingleGridClass() {}\n\nDatagridSingleGridClass.prototype = new DatagridBaseClass();\nDatagridSingleGridClass.prototype.onClickCell = function (idx, row) {\n    //\n};\nDatagridSingleGridClass.prototype.onClickRow = function (idx, row) {};\n\n/*** Class End  ***/\n\nVue.component(\'single-grid-pms0620050-tmp\', {\n    template: \'#singleGridPMS0620050Tmp\',\n    props: [\'rowData\', \'isModifiable\'],\n    data: function () {\n        return {\n            singleData: {},\n            oriSingleData: {},\n            fieldsData: [],\n            oriFieldsData: [],\n            isFirstData: false,\n            isLastData: false,\n            BTN_action: false,\n            isSaveEnable: false,\n            isDelEnable: false,\n            isLoadingDialog: false,\n            loadingText: ""\n        };\n    },\n    created: function () {\n        let self = this;\n        vmHub.$on(\'doSaveModifyData\', function (res) {\n            if (vm.isOnlyClose) {\n                self.doSaveModifyData(function (result) {\n                    if (result) {\n                        vm.isAction = true;\n                        vm.editingRow = {};\n                        vm.isLoading = true;\n                        vm.initTmpCUD();\n                        vm.loadDataGridByPrgID();\n                    }\n                });\n            } else {\n                vm.isAction = true;\n                vm.editingRow = {};\n                vm.isLoading = true;\n                vm.initTmpCUD();\n                vm.loadDataGridByPrgID();\n            }\n        });\n        this.initPurview();\n    },\n    mounted: function () {\n        this.isLoadingDialog = true;\n        this.loadingText = "Loading...";\n    },\n    watch: {\n        rowData: function (val) {\n            if (!_.isEmpty(val)) {\n                this.loadingText = "Loading...";\n                this.initData();\n                this.fetchFieldData();\n\n                let nowDatagridRowIndex = $("#PMS0620050_dg").datagrid(\'getRowIndex\', val);\n\n                $("#PMS0620050_dg").datagrid(\'selectRow\', nowDatagridRowIndex);\n\n                if ($("#PMS0620050_dg").datagrid(\'getRowIndex\', val) == 0) {\n                    //已經到第一筆\n                    this.isFirstData = true;\n                    this.isLastData = false;\n                    if ($("#PMS0620050_dg").datagrid(\'getRowIndex\', val) == vm.pageOneDataGridRows.length - 1) {\n                        this.isLastData = true;\n                    }\n                } else if ($("#PMS0620050_dg").datagrid(\'getRowIndex\', val) == vm.pageOneDataGridRows.length - 1) {\n                    //已經到最後一筆\n                    this.isFirstData = false;\n                    this.isLastData = true;\n                } else {\n\n                    this.isFirstData = false;\n                    this.isLastData = false;\n                }\n            }\n        },\n        singleData: {\n            handler(val, oldVal) {\n                if (!_.isEmpty(val)) {\n                    let ln_amtValue = _.clone(val[\'traffic_amt\']);\n                    let lo_amtField = _.findWhere(this.oriFieldsData, { ui_field_name: \'traffic_amt\' });\n                    this.formatAmt(ln_amtValue, lo_amtField);\n                }\n            },\n            deep: true\n        },\n        isSaveEnable: function (val) {\n            let purview = _.findIndex(go_funcPurview, function (value) {\n                return value.func_id == "0500";\n            });\n            if (purview == -1) {\n                this.isSaveEnable = true;\n            }\n        },\n        isDelEnable: function (val) {\n            let purview = _.findIndex(go_funcPurview, function (value) {\n                return value.func_id == "0300";\n            });\n            if (purview == -1) {\n                this.isDelEnable = true;\n            }\n        }\n    },\n    methods: {\n        initPurview: function () {\n            let purview;\n            purview = _.findIndex(go_funcPurview, function (value) {\n                return value.func_id == "0500";\n            });\n            if (purview == -1) {\n                this.isSaveEnable = true;\n            }\n\n            purview = _.findIndex(go_funcPurview, function (value) {\n                return value.func_id == "0300";\n            });\n            if (purview == -1) {\n                this.isDelEnable = true;\n            }\n        },\n        initData: function () {\n            this.isLoadingDialog = true;\n            this.singleData = {};\n            this.oriSingleData = {};\n            this.fieldsData = [];\n            this.oriFieldsData = [];\n        },\n        fetchFieldData: function () {\n            let self = this;\n            $.post("/api/singleGridPageFieldQuery", {\n                prg_id: gs_prgId,\n                page_id: 2,\n                singleRowData: self.rowData\n            }, function (result) {\n                if (result.success) {\n                    self.oriFieldsData = result.fieldData;\n                    self.fieldsData = _.values(_.groupBy(_.sortBy(result.fieldData, "row_seq"), "row_seq"));\n                    self.fetchRowData(self.rowData);\n                }\n            });\n        },\n        fetchRowData: function (editingRow) {\n            let self = this;\n            editingRow = _.extend(editingRow, { prg_id: gs_prgId });\n\n            $.post(\'/api/singlePageRowDataQuery\', editingRow, function (result) {\n                if (result.success) {\n                    result.rowData["avisit_dat"] = _.isNull(self.singleData["avisit_dat"]) ? "" : moment(new Date(self.singleData["avisit_dat"])).format("YYYY/MM/DD");\n                    result.rowData["remark"] = _.isNull(result.rowData["remark"]) ? "" : result.rowData["remark"];\n                    self.singleData = result.rowData;\n                    self.oriSingleData = _.clone(result.rowData);\n                } else {\n                    console.error(result.errorMsg);\n                }\n                self.isLoadingDialog = false;\n            });\n\n            editingRow.visit_dat = moment(new Date(editingRow.visit_dat)).format("YYYY/MM/DD");\n            editingRow.avisit_dat = moment(new Date(editingRow.avisit_dat)).format("YYYY/MM/DD");\n            $.post("/api/fetchSinglePageFieldData", {\n                prg_id: gs_prgId,\n                page_id: 2,\n                searchCond: editingRow\n            }, function (result) {});\n        },\n        formatAmt: function (amtValue, field) {\n            let lb_isModify = true;\n            let ls_amtValue = _.isUndefined(amtValue) ? \'\' : _.clone(amtValue).toString();\n            let ls_oriAmtValue = \'\';\n            let la_amtValue = ls_amtValue.split("");\n            if (la_amtValue.length == 0) {\n                return;\n            }\n            for (let i = 0; i < la_amtValue.length; i++) {\n                if (la_amtValue[i].charCodeAt(i) < 48 || la_amtValue[i].charCodeAt(i) > 57) {\n                    lb_isModify = false;\n                    break;\n                }\n            }\n\n            if (lb_isModify) {\n                if (ls_amtValue.indexOf(\',\') > -1) {\n                    let la_splitAmtValue = ls_amtValue.split(\',\');\n                    _.each(la_splitAmtValue, function (ls_splitAmtValue) {\n                        ls_oriAmtValue = ls_oriAmtValue + ls_splitAmtValue;\n                    });\n                } else {\n                    ls_oriAmtValue = ls_amtValue;\n                }\n\n                ls_oriAmtValue = Number(ls_oriAmtValue);\n\n                let patternValue = field.format_func_name;\n\n                let patternLength = patternValue.indexOf(\'.\') > -1 ? patternValue.slice(0, patternValue.indexOf(\'.\')).length - 1 : patternValue.length - 1;\n\n                //幾位小數\n                let numberOfDecimals = patternValue.indexOf(\'.\') > -1 ? patternValue.slice(patternValue.indexOf(\'.\') + 1, patternValue.length).length : 0;\n                //幾位數一個逗號\n                let commaPosition = patternLength - patternValue.lastIndexOf(\',\');\n\n                let reStr = \'\\\\d(?=(\\\\d{\' + (commaPosition || 3) + \'})+\' + (numberOfDecimals > 0 ? \'\\\\.\' : \'$\') + \')\';\n\n                ls_oriAmtValue = ls_oriAmtValue.toFixed(numberOfDecimals).toString().replace(new RegExp(reStr, \'g\'), \'$&,\');\n\n                this.singleData[field.ui_field_name] = ls_oriAmtValue;\n            } else {\n                this.singleData[field.ui_field_name] = 0;\n            }\n        },\n        chkClickPopUpGrid: function (field) {\n            let self = this;\n            if (field.ui_type == "popupgrid" || field.ui_type == "multipopupgrid") {\n                let params = {\n                    prg_id: "PMS0620050",\n                    fields: field\n                };\n\n                $.post("/api/popUpGridData", params, function (result) {\n                    if (result != null) {\n                        self.selectPopUpGridData = result.showDataGrid;\n                        result.fieldData = field;\n                        vmHub.$emit(\'showPopUpDataGrid\', result);\n                        self.showPopUpGridDialog();\n                    }\n                });\n            }\n        },\n        chkFieldRule: function (ui_field_name, rule_func_name) {\n            if (rule_func_name === "") {\n                return;\n            }\n            let self = this;\n            let la_originData = [this.oriSingleData];\n            let la_singleData = [this.singleData];\n            let la_diff = _.difference(la_originData, la_singleData);\n\n            // 判斷資料是否有異動\n            if (la_diff.length != 0) {\n                this.isUpdate = true;\n            }\n\n            if (!_.isEmpty(rule_func_name.trim())) {\n                let postData = {\n                    prg_id: "PMS0620050",\n                    rule_func_name: rule_func_name,\n                    validateField: ui_field_name,\n                    singleRowData: JSON.parse(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(this.singleData)),\n                    oriSingleData: this.oriSingleData\n                };\n                $.post(\'/api/chkFieldRule\', postData, function (result) {\n\n                    if (result.success) {\n                        //是否要show出訊息\n                        if (result.showAlert) {\n                            alert(result.alertMsg);\n                        }\n\n                        //是否要show出詢問視窗\n                        if (result.showConfirm) {\n                            if (confirm(result.confirmMsg)) {} else {\n                                //有沒有要再打一次ajax到後端\n                                if (result.isGoPostAjax && !_.isEmpty(result.ajaxURL)) {\n                                    $.post(result.ajaxURL, postData, function (result) {\n\n                                        if (!result.success) {\n                                            alert(result.errorMsg);\n                                        } else {\n\n                                            if (!_.isUndefined(result.effectValues) && _.size(result.effectValues) > 0) {\n                                                self.singleData = _.extend(self.singleData, result.effectValues);\n                                            }\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    } else {\n                        alert(result.errorMsg);\n                    }\n\n                    //連動帶回的值\n                    if (!_.isUndefined(result.effectValues) && _.size(result.effectValues) > 0) {\n                        self.singleData = _.extend(self.singleData, result.effectValues);\n                    }\n                });\n            }\n        },\n        showDropdownDisplayName: function (val, selectData) {\n            if (_.findIndex(selectData, { value: val }) > -1) {\n                return _.findWhere(selectData, { value: val }).display;\n            }\n            return val + ":";\n        },\n        toFirstData: function () {\n            let self = this;\n            this.doSaveModifyData(function (res) {\n                if (res) {\n                    self.isFirstData = true;\n                    self.isLastData = false;\n                    self.isLoadingDialog = true;\n                    self.rowData = _.first(vm.pageOneDataGridRows);\n                }\n            });\n        },\n        toPreData: function () {\n            let self = this;\n            this.doSaveModifyData(function (res) {\n                if (res) {\n                    self.isLoadingDialog = true;\n                    let nowRowIndex = $("#PMS0620050_dg").datagrid(\'getRowIndex\', self.rowData);\n                    self.rowData = vm.pageOneDataGridRows[nowRowIndex - 1];\n                }\n            });\n        },\n        toNextData: function () {\n            let self = this;\n            this.doSaveModifyData(function (res) {\n                if (res) {\n                    self.isLoadingDialog = true;\n                    let nowRowIndex = $("#PMS0620050_dg").datagrid(\'getRowIndex\', self.rowData);\n                    self.rowData = vm.pageOneDataGridRows[nowRowIndex + 1];\n                }\n            });\n        },\n        toLastData: function () {\n            let self = this;\n            this.doSaveModifyData(function (res) {\n                if (res) {\n                    self.isFirstData = false;\n                    self.isLastData = true;\n                    self.isLoadingDialog = true;\n                    self.rowData = _.last(vm.pageOneDataGridRows);\n                }\n            });\n        },\n        doDelGrid: function () {\n            let self = this;\n            let q = confirm(go_i18nLang["SystemCommon"].check_delete);\n            if (q) {\n                //刪除前檢查\n                $.post("/api/deleteFuncRule", {\n                    page_id: 2,\n                    prg_id: gs_prgId,\n                    deleteData: [self.singleData]\n                }, function (result) {\n                    if (result.success) {\n                        vm.tmpCUD.deleteData = [self.singleData];\n                        vm.tmpCUD.oriData = [self.oriSingleData];\n                        vm.doSaveCUD("PMS0620050", 1, function (result) {\n                            alert(go_i18nLang["SystemCommon"].delSuccess);\n                            vm.initTmpCUD();\n                            vm.isOnlyClose = false;\n                            self.doCloseDialog();\n                        });\n                    } else {\n                        alert(result.errorMsg);\n                    }\n                });\n            }\n        },\n        doSaveModifyData(callback) {\n            let self = this;\n            let lb_isDataChang = false;\n            let lo_checkRowData = JSON.parse(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(this.singleData));\n\n            //將欄位traffic_amt的值從有format轉回原本number\n            let ls_trafficAmt = "";\n\n            if (lo_checkRowData["traffic_amt"].indexOf(\',\') > -1) {\n                let la_splitAmtValue = lo_checkRowData["traffic_amt"].split(\',\');\n                _.each(la_splitAmtValue, function (ls_splitAmtValue) {\n                    ls_trafficAmt = ls_trafficAmt + ls_splitAmtValue;\n                });\n            } else {\n                ls_trafficAmt = lo_checkRowData["traffic_amt"];\n            }\n\n            lo_checkRowData["traffic_amt"] = Number(ls_trafficAmt);\n            lo_checkRowData["avisit_dat"] = moment(new Date(lo_checkRowData["avisit_dat"])).format("YYYY/MM/DD");\n            lo_checkRowData["visit_dat"] = moment(new Date(lo_checkRowData["visit_dat"])).format("YYYY/MM/DD");\n            self.oriSingleData["avisit_dat"] = moment(new Date(self.oriSingleData["avisit_dat"])).format("YYYY/MM/DD");\n\n            _.each(lo_checkRowData, function (val, key) {\n                if (self.oriSingleData[key] != val) {\n                    lb_isDataChang = true;\n                    return;\n                }\n            });\n\n            if (lb_isDataChang) {\n                let q = confirm(go_i18nLang["SystemCommon"].Save_changed_data);\n\n                if (q) {\n                    this.isLoadingDialog = true;\n                    this.loadingText = "Saving...";\n\n                    let lo_chkResult = this.dataValidate();\n\n                    if (lo_chkResult.success == false && vm.tmpCUD.deleteData.length == 0) {\n                        alert(lo_chkResult.msg);\n                        this.isLoadingDialog = false;\n                    } else {\n                        lo_checkRowData["tab_page_id"] = 1;\n                        lo_checkRowData["event_time"] = moment().format("YYYY/MM/DD HH:mm:ss");\n\n                        vm.tmpCUD.updateData = [lo_checkRowData];\n                        vm.tmpCUD.oriData = [this.oriSingleData];\n\n                        let lo_params = {\n                            prg_id: "PMS0620050",\n                            page_id: 2,\n                            tmpCUD: vm.tmpCUD\n                        };\n\n                        $.post("/api/doOperationSave", lo_params, function (result) {\n                            if (result.success) {\n                                alert(go_i18nLang["program"]["PMS0620020"].saveSuccess);\n                            } else {\n                                alert(result.errorMsg);\n                            }\n                            self.isLoadingDialog = false;\n                            vm.initTmpCUD();\n                            callback(true);\n                        });\n                    }\n                } else {\n                    callback(true);\n                }\n            } else {\n                callback(true);\n            }\n        },\n        dataValidate: function () {\n            let self = this;\n            let lo_checkResult;\n\n            // 單筆資料檢查\n            for (let i = 0; i < this.oriFieldsData.length; i++) {\n                let lo_field = this.oriFieldsData[i];\n                //必填\n                if (lo_field.requirable == "Y" && lo_field.modificable != "N" && lo_field.ui_type != "checkbox") {\n                    lo_checkResult = go_validateClass.required(self.singleData[lo_field.ui_field_name], lo_field.ui_display_name);\n                    if (lo_checkResult.success == false) {\n                        break;\n                    }\n                }\n\n                //有format\n                if (lo_field.format_func_name != "" && !_.isUndefined(go_validateClass[lo_field.format_func_name])) {\n                    lo_checkResult = go_validateClass[lo_field.format_func_name](self.singleData[lo_field.ui_field_name], lo_field.ui_display_name);\n                    if (lo_checkResult.success == false) {\n                        break;\n                    }\n                }\n            }\n\n            return lo_checkResult;\n        },\n        doSaveGrid: function () {\n            let self = this;\n            this.isLoadingDialog = true;\n            this.loadingText = "Saving...";\n\n            let lo_chkResult = this.dataValidate();\n\n            if (lo_chkResult.success == false && vm.tmpCUD.deleteData.length == 0) {\n                alert(lo_chkResult.msg);\n                this.isLoadingDialog = false;\n            } else {\n                let postRowData = _.clone(this.singleData);\n\n                //將欄位traffic_amt的值從有format轉回原本number\n                let ls_trafficAmt = "";\n\n                if (postRowData["traffic_amt"].indexOf(\',\') > -1) {\n                    let la_splitAmtValue = postRowData["traffic_amt"].split(\',\');\n                    _.each(la_splitAmtValue, function (ls_splitAmtValue) {\n                        ls_trafficAmt = ls_trafficAmt + ls_splitAmtValue;\n                    });\n                } else {\n                    ls_trafficAmt = postRowData["traffic_amt"];\n                }\n\n                postRowData["traffic_amt"] = Number(ls_trafficAmt);\n                postRowData["avisit_dat"] = moment(new Date(postRowData["avisit_dat"])).format("YYYY/MM/DD");\n                postRowData["visit_dat"] = moment(new Date(postRowData["visit_dat"])).format("YYYY/MM/DD");\n                postRowData["tab_page_id"] = 1;\n                postRowData["event_time"] = moment().format("YYYY/MM/DD HH:mm:ss");\n\n                vm.tmpCUD.updateData = [postRowData];\n                vm.tmpCUD.oriData = [this.oriSingleData];\n\n                vm.doSaveCUD("PMS0620050", 2, function (result) {\n                    if (result.success) {\n                        alert(go_i18nLang["program"]["PMS0620020"].saveSuccess);\n                        vm.isOnlyClose = false;\n                        self.doCloseDialog();\n                    } else {\n                        alert(result.errorMsg);\n                    }\n                    self.isLoadingDialog = false;\n                    vm.initTmpCUD();\n                });\n            }\n        },\n        doCloseDialog: function () {\n            let self = this;\n            $("#singleGridPMS0620050").dialog(\'close\');\n            vm.isOnlyClose = true;\n        }\n    }\n});\n\nlet vm = new Vue({\n    el: "#PMS0620050App",\n    mounted: function () {\n        this.fetchUserInfo();\n        this.initTmpCUD();\n        this.loadDataGridByPrgID();\n        this.fetchSingleWidth();\n    },\n    data: {\n        tmpCUD: {\n            createData: [],\n            updateData: [],\n            deleteData: [],\n            oriData: []\n        },\n        userInfo: {},\n        pageOneDataGridRows: [],\n        pageOneFieldData: [],\n        searchFields: [],\n        searchCond: {\n            show_cod: "",\n            cust_nam: "",\n            status_cos: "",\n            type_cod: [],\n            contract_sta: [],\n            sales_cod: [],\n            business_cod: [],\n            area_cod: [],\n            visit_sta: [],\n            visit_typ: "",\n            visit_dat: "",\n            avisit_dat: "",\n            purport_rmk: "",\n            remark: ""\n        },\n        dgIns: {},\n        isLoading: true,\n        editingRow: {},\n        isModifiable: true,\n        isAction: false,\n        isEditEnable: false,\n        isOnlyClose: true,\n        maxWidth: 0\n    },\n    watch: {\n        isEditEnable(val) {\n            let purview = _.findIndex(go_funcPurview, function (value) {\n                return value.func_id == "0400";\n            });\n            if (purview == -1) {\n                this.isEditEnable = true;\n            }\n        }\n    },\n    methods: {\n        fetchUserInfo: function () {\n            $.post(\'/api/getUserInfo\', function (result) {\n                if (result.success) {\n                    vm.userInfo = result.userInfo;\n                }\n            });\n        },\n        initTmpCUD: function () {\n            this.tmpCUD = {\n                createData: [],\n                updateData: [],\n                deleteData: [],\n                oriData: []\n            };\n        },\n        loadDataGridByPrgID: function () {\n            let lo_searchCond = _.clone(this.searchCond);\n\n            let lo_params = {\n                prg_id: "PMS0620050",\n                searchCond: lo_searchCond,\n                pag_id: 1\n            };\n\n            $.post("/api/fetchDataGridFieldData", lo_params, function (result) {\n                if (vm.searchFields.length <= 0) {\n                    vm.searchFields = result.searchFields;\n                }\n                vm.pageOneDataGridRows = result.dgRowData;\n                vm.pageOneFieldData = result.dgFieldsData;\n                vm.showDataGrid();\n            });\n        },\n        showDataGrid: function () {\n            let la_colOption = DatagridFieldAdapter.combineFieldOption(this.pageOneFieldData, \'PMS0620050_dg\');\n            let ln_pageSize = 10; //一開始只載入10筆資料\n\n            this.isLoading = false;\n            this.dgIns = new DatagridSingleGridClass();\n\n            this.dgIns.init(gs_prgId, "PMS0620050_dg", la_colOption, this.pageOneFieldData, {\n                singleSelect: false,\n                pagination: true,\n                rownumbers: true,\n                pageSize: ln_pageSize\n            });\n            this.dgIns.loadPageDgData(this.pageOneDataGridRows);\n            this.isAction = false;\n        },\n        editRow: function () {\n            this.initTmpCUD();\n            this.isLoading = true;\n            this.editingRow = {};\n            this.isModificable = true;\n\n            let editRow = $(\'#PMS0620050_dg\').datagrid(\'getSelected\');\n\n            if (!editRow) {\n                alert(go_i18nLang["SystemCommon"].SelectData);\n            } else {\n                this.editingRow = editRow;\n                this.showSingleGridDialog();\n            }\n\n            this.isLoading = false;\n        },\n        fetchSingleWidth: function () {\n            let self = this;\n            $.post("/api/singleGridPageFieldQuery", {\n                prg_id: gs_prgId,\n                page_id: 2\n            }, function (result) {\n                if (result.success) {\n\n                    let fieldsData = _.values(_.groupBy(_.sortBy(result.fieldData, "row_seq"), "row_seq"));\n                    // 算最小寬度 && 最大行數\n                    let maxField = fieldsData[0];\n                    _.each(maxField, function (lo_maxField, index) {\n\n                        let width = parseInt(lo_maxField.width) || 35; //90\n                        let label_width = parseInt(lo_maxField.label_width) || 50; //165\n                        self.maxWidth += width + label_width + 100;\n                        //todo 此單筆最後一排有超過五個以上的grid-item 會錯誤\n                        // if(index >= 2) return true;\n                    });\n                }\n            });\n        },\n        showSingleGridDialog: function () {\n            let maxHeight = document.documentElement.clientHeight - 70; //browser 高度 - 70功能列\n            // gridWt = $(\'.singleGridContent .grid-item label\').width() + $(\'.singleGridContent .grid-item input\').width() +14;\n            let dialogWt = this.maxWidth + 120;\n            let height = 10 * 50; // 預設一個row 高度\n            let dialog = $(\'#singleGridPMS0620050\').removeClass(\'hide\').dialog({\n                autoOpen: false,\n                modal: true,\n                title: go_i18nLang["program"]["PMS0620050"].edit_vist_mn,\n                minWidth: _.min([dialogWt, 1000]),\n                width: _.min([dialogWt, 1000]),\n                maxHeight: maxHeight,\n                resizable: true,\n                onBeforeClose: function () {\n                    vmHub.$emit(\'doSaveModifyData\');\n                }\n            }).dialog(\'open\');\n            this.isLoading = false;\n            $("#singleGridPMS0620050").css("height", _.min([maxHeight, height]) + 20);\n        },\n        doSaveCUD: function (prg_id, page_id, callback) {\n            let lo_params = {\n                prg_id: prg_id,\n                page_id: page_id,\n                tmpCUD: this.tmpCUD\n            };\n\n            $.post("/api/doOperationSave", lo_params, function (result) {\n                callback(result);\n            });\n        }\n    }\n});\n\nfunction searchValue(la_children, ls_selectData) {\n    _.each(la_children, function (lo_children) {\n        if (_.isUndefined(lo_children.value)) {\n            searchValue(lo_children.children, ls_selectData);\n        } else {\n            ls_selectData.push(lo_children.value);\n            return;\n        }\n    });\n}\n\nfunction searchOptions(la_options, ls_value, la_selectData) {\n    _.each(la_options, function (lo_option) {\n        let lo_childrenOptions = _.findWhere(lo_option.children, { id: ls_value });\n        if (_.isUndefined(lo_childrenOptions)) {\n            searchOptions(lo_option.children, ls_value, la_selectData);\n        } else if (_.isUndefined(lo_childrenOptions.value)) {\n            searchValue(lo_childrenOptions.children, la_selectData);\n        } else {\n            la_selectData.push(lo_childrenOptions.value);\n            return;\n        }\n    });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){eval('module.exports = { "default": __webpack_require__(2), __esModule: true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5LmpzPzlhZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){eval("var core = __webpack_require__(3);\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5LmpzP2FhNDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx1Q0FBdUMsNEJBQTRCO0FBQ25FLHlDQUF5QztBQUN6QztBQUNBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKTtcbnZhciAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0geyBzdHJpbmdpZnk6IEpTT04uc3RyaW5naWZ5IH0pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gJEpTT04uc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmd1bWVudHMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeS5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,exports){eval("var core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanM/MTVlMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IsdUNBQXVDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n")}]);