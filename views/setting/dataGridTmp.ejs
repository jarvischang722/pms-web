<style>
    body {
        background-color: #ffffff;
    }

    .icon-toggle {
        background: url('../images/icon/14.png');
        repeat: no-repeat;
        background-size: 100% 100%;
    }

    .icon-toggle2 {
        background: url('../images/icon/14-1.png');
        repeat: no-repeat;
        background-size: 100% 100%;
    }

    .icon-toggle3 {
        background: url('../images/icon/14-2.png');
        repeat: no-repeat;
        background-size: 100% 100%;
    }

</style>
<div id="DGApp">
    <div class="col-xs-12" v-show="!isTableLock">
        <div class="col-sm-11 col-xs-11">
            <div class="row">
                <div class="" style="padding: 0 10px 0 5px; box-sizing: border-box; margin-left: -15px;">

                    <table id="prg_dg">
                        <thead>
                        <tr>

                            <!-- data grid content-->

                        </tr>
                        </thead>
                    </table>

                    <div class="clearfix"></div>
                </div>
            </div>
        </div>

        <div class="col-xs-1 col-sm-1">
            <div class="row">
                <div class="right-menu-co">
                    <ul>
                        <li>
                            <button id="ins-btn" :disabled="saving" class="btn btn-primary btn-white btn-defaultWidth"
                                    @click="appendRow"
                                    role="button"><%= __("program")["PMS0810010"]["btn_insert"] %></button>
                        </li>
                        <li>
                            <button id="remove-btn" :disabled="saving"
                                    class="btn btn-danger btn-white btn-defaultWidth"
                                    @click="removeRow();"
                                    role="button"><%= __("program")["PMS0810010"]["btn_delete"] %></button>
                        </li>
                        <li>
                            <button id="save-btn" :disabled="saving" class="btn btn-primary btn-white btn-defaultWidth"
                                    @click="doSave();"
                                    role="button"><%= __("program")["PMS0810010"]["btn_save"] %></button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div> <!-- /.col-sm-12 -->

</div>
<div class="clearfix"></div>

<script type="text/javascript">


    var prg_id = '<%= prg_id %>';
    var vm = new Vue({
        el: '#DGApp',
        ready: function () {
            this.initTmpCUD();
            this.fetchDataGridData();
        },
        data: {
            isTableLock: false,
            tableLockMsg: "",
            editIndex: undefined,
            tmpCUD: {},
            saving: false
        },
        watch: {},
        methods: {
            //
            initTmpCUD: function () {
                this.tmpCUD = {
                    createData: [],
                    updateData: [],
                    deleteData: []
                }
            },
            //儲存欄位屬性
            doSaveColumnFields: function () {

                var saveField = [];
                var allField = $('#prg_dg').datagrid("getColumnFields");

                _.each(allField, function (field, fIdx) {
                    var currentColumOption = $('#prg_dg').datagrid("getColumnOption", field);
                    var editType = currentColumOption.editor.type
                    var ui_type = "text";
                    if (editType == "textbox") {
                        ui_type = "text";
                    } else if (editType == "numberbox") {
                        ui_type = "number";
                    } else if (editType == "datebox") {
                        ui_type = "date";
                    } else if (editType == "datetimebox") {
                        ui_type = "datetime";
                    } else if (editType == "combobox") {
                        var getMulitSelect = currentColumOption.editor.options.multiline;

                        if (getMulitSelect == true)
                            ui_type = "multiselect";
                        else
                            ui_type = "select";
                    }

                    var columnOption = {
                        "prg_id": prg_id,
                        "ui_field_name": field,
                        "ui_type": ui_type,
                        "col_seq": fIdx,
                        "visiable": "Y"
                    };
                    columnOption = _.extend(columnOption, currentColumOption)
                    saveField.push(columnOption);

                });

                $.post("/api/saveFieldOptionByUser", {
                    prg_id: prg_id,
                    fieldOptions: saveField
                });
            },
            //抓取顯示資料
            fetchDataGridData: function () {
                // waitingDialog.show();
                $.post("/api/prgDataGridDataQuery", {prg_id: prg_id}, function (result) {
                    waitingDialog.hide();
                    vm.showDataGrid(result.fieldData, result.dataGridRows)
                });
            },
            //顯示資料
            showDataGrid: function (fieldData, dataGridRows) {
                var columnsData = EZfieldClass.combineFieldOption(fieldData);

                var dgData = {total: dataGridRows.length, rows: dataGridRows};
                $('#prg_dg').datagrid({
                    columns: [columnsData],
                    remoteSort: false,
                    singleSelect: true,
                    selectOnCheck: true,
                    checkOnSelect: true,
                    data: dgData,
                    onClickCell: vm.onClickCell,
                    onEndEdit: vm.onEndEdit,
                    onDropColumn: vm.doSaveColumnFields, //當移動順序欄位時
                    onResizeColumn: vm.doSaveColumnFields,  //當欄位時寬度異動時
                    onCheck: function () {
                        var checkRows = $('#prg_dg').datagrid('getSelections');
                        if (checkRows.length > 0) {
                            //CUDStatusClass.startDeleteMode();
                        }
                    },
                    onSortColumn: function () {
                        $("#dgCheckbox").datagrid('uncheckAll');
                    }

                }).datagrid('columnMoving');


            },
            //按下一個Row
            onClickCell: function (index, field) {

                if (vm.editIndex != index) {
                    if (this.endEditing()) {
                        $('#prg_dg').datagrid('selectRow', index)
                            .datagrid('beginEdit', index);
                        var ed = $('#prg_dg').datagrid('getEditor', {index: index, field: field});
                        if (ed) {
                            ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                        }
                        vm.editIndex = index;
                    } else {
                        setTimeout(function () {
                            $('#prg_dg').datagrid('selectRow', vm.editIndex);
                        }, 0);
                    }
                }
            },
            //結束編輯
            onEndEdit: function (index, row, changes) {

                if (row.createRow == 'Y') {
                    this.tmpCUD.createData.push(row);
                } else {
                    this.tmpCUD.updateData.push(row);
                }

            },
            endEditing: function () {
                if (this.editIndex == undefined) {
                    return true
                }
                if ($('#prg_dg').datagrid('validateRow', this.editIndex)) {
                    $('#prg_dg').datagrid('endEdit', this.editIndex);
                    this.editIndex = undefined;
                    return true;
                } else {
                    return false;
                }
            },
            //新增一個Row
            appendRow: function () {
                var dataCount = $("#prg_dg").datagrid("getData").total;    //SAM 20170418 因新增時可能需要帶預設值且是由目前資料來判斷取得值，所以需取得所有資料
                if (this.endEditing()) {
                    $.post("/api/handleDataGridAddEventRule", {prg_id: prg_id ,dataCount : dataCount}, function (result) {
                        var prgDefaultObj = {createRow: 'Y'};
                        if (result.success) {
                            prgDefaultObj = result.prgDefaultObj;
                        }
                        $('#prg_dg').datagrid('appendRow', prgDefaultObj);
                        vm.editIndex = $('#prg_dg').datagrid('getRows').length - 1;
                        $('#prg_dg').datagrid('selectRow', vm.editIndex)
                            .datagrid('beginEdit', vm.editIndex);
                    })

                }
            },
            //刪除選定的Row
            removeRow: function removeRow() {
                var delRow = $('#prg_dg').datagrid('getSelected');
                if (!delRow) {
                    alert("請選擇要刪除的資料");
                }

                vm.tmpCUD.deleteData.push(delRow);

                $.post("/api/handleDataGridDeleteEventRule", {
                    prg_id: prg_id,
                    deleteData: vm.tmpCUD.deleteData
                }, function (result) {
                    if(result.success){
                        $('#prg_dg').datagrid('deleteRow', $('#prg_dg').datagrid('getRowIndex', delRow));
                    }else{
                        vm.tmpCUD.deleteData = _.without(vm.tmpCUD.deleteData, delRow);  //刪除在裡面的暫存
                        vm.endEditing();
                        alert(result.errorMsg);
                    }

                })

            },
            //儲存
            doSave: function () {

                if (this.endEditing()) {

                    var params = {
                        prg_id: prg_id,
                        deleteData: vm.tmpCUD.deleteData,
                        createData: vm.tmpCUD.createData,
                        updateData: vm.tmpCUD.updateData
                    }
                    vm.saving = true;
                    waitingDialog.show('Saving...');
                    $.post("/api/saveDataRow", params, function (result) {
                        vm.saving = false;
                        waitingDialog.hide();
                        if (result.success) {
                            $('#prg_dg').datagrid('acceptChanges');
                            vm.initTmpCUD();
                            alert('save success!');
                        } else {
                            alert(result.errorMsg);
                        }
                    })

                }
            },
            //回復
            reject: function () {
                $('#prg_dg').datagrid('rejectChanges');
                this.editIndex = undefined;
            },
            //獲取改變的Row
            getChanges: function () {
                var rows = $('#prg_dg').datagrid('getChanges');
                //alert(rows.length + ' rows xare changed!');
            }


        }
    })


</script>

<script src="/js/setup/datagrid.js"></script>
